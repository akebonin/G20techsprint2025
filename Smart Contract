Address: 

0xc5cE95ec9D9178d62ED2F68c51bc03aBe05A5F2c

Smart Contract: 

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CreditAssetAutoReset {
    address public lender;
    address public borrower;
    uint256 public yieldThreshold;
    uint256 public totalFunded;
    uint256 public constant RELEASE_AMOUNT = 0.001 ether;

    event Funded(address indexed lender, uint256 amount);
    event FundsReleased(address indexed borrower, uint256 amount);
    event BorrowerRegistered(address indexed borrower);

    constructor(uint256 _yieldThreshold) payable {
        yieldThreshold = _yieldThreshold;
        lender = msg.sender;
        if (msg.value > 0) {
            totalFunded = msg.value;
            emit Funded(msg.sender, msg.value);
        }
    }

    modifier onlyBorrower() {
        require(msg.sender == borrower, "Not the registered borrower.");
        _;
    }

    function fundLoan() external payable {
        require(msg.value > 0, "Must send ETH to fund the loan");
        totalFunded += msg.value;
        lender = msg.sender;
        emit Funded(msg.sender, msg.value);
    }

    function registerAsBorrower() public {
        require(borrower == address(0), "A borrower is already active.");
        borrower = msg.sender;
        emit BorrowerRegistered(msg.sender);
    }

    function releaseFunds(uint256 actualYield) public onlyBorrower {
        require(actualYield >= yieldThreshold, "Yield below required threshold.");
        require(totalFunded >= RELEASE_AMOUNT, "Insufficient contract balance.");
        require(address(this).balance >= RELEASE_AMOUNT, "Contract balance too low.");
        totalFunded -= RELEASE_AMOUNT;
        payable(borrower).transfer(RELEASE_AMOUNT);
        emit FundsReleased(borrower, RELEASE_AMOUNT);
        borrower = address(0);
    }

    function getStatus() public view returns (string memory) {
        if (borrower == address(0)) {
            return "Awaiting borrower registration";
        } else {
            return "Borrower registered, awaiting yield trigger";
        }
    }

    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function getRemainingFunds() public view returns (uint256) {
        return totalFunded;
    }

    receive() external payable {
        totalFunded += msg.value;
        lender = msg.sender;
        emit Funded(msg.sender, msg.value);
    }
}


ABI:

[
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_yieldThreshold",
				"type": "uint256"
			}
		],
		"stateMutability": "payable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "borrower",
				"type": "address"
			}
		],
		"name": "BorrowerRegistered",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "lender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Funded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "borrower",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "FundsReleased",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "RELEASE_AMOUNT",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "borrower",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "fundLoan",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getRemainingFunds",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getStatus",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "lender",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "registerAsBorrower",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "actualYield",
				"type": "uint256"
			}
		],
		"name": "releaseFunds",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalFunded",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "yieldThreshold",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
]



BYTECODE:

6080604052604051610780380380610780833981016040819052602091607c565b60028190555f80546001600160a01b03191633179055341560775734600381905560405190815233907f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249060200160405180910390a25b506092565b5f60208284031215608b575f5ffd5b5051919050565b6106e18061009f5f395ff3fe60806040526004361061009d575f3560e01c80637ed08cbe116100625780637ed08cbe146101b4578063833687eb146101c85780638db57994146101dc578063ad044f49146101e4578063bcead63e146101f9578063e816c32c14610217575f5ffd5b806312065fe01461010557806332ae6ceb146101265780634d68282f1461013b5780634e69d5601461015c5780637df1f1b91461017d575f5ffd5b36610101573460035f8282546100b39190610608565b90915550505f80546001600160a01b031916339081179091556040513481527f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249060200160405180910390a2005b5f5ffd5b348015610110575f5ffd5b50475b6040519081526020015b60405180910390f35b348015610131575f5ffd5b5061011360025481565b348015610146575f5ffd5b5061015a610155366004610621565b610231565b005b348015610167575f5ffd5b50610170610445565b60405161011d9190610638565b348015610188575f5ffd5b5060015461019c906001600160a01b031681565b6040516001600160a01b03909116815260200161011d565b3480156101bf575f5ffd5b5061015a6104ae565b3480156101d3575f5ffd5b50600354610113565b61015a610546565b3480156101ef575f5ffd5b5061011360035481565b348015610204575f5ffd5b505f5461019c906001600160a01b031681565b348015610222575f5ffd5b5061011366038d7ea4c6800081565b6001546001600160a01b031633146102905760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746865207265676973746572656420626f72726f7765722e0000000060448201526064015b60405180910390fd5b6002548110156102e25760405162461bcd60e51b815260206004820152601f60248201527f5969656c642062656c6f77207265717569726564207468726573686f6c642e006044820152606401610287565b66038d7ea4c68000600354101561033b5760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006044820152606401610287565b66038d7ea4c680004710156103925760405162461bcd60e51b815260206004820152601960248201527f436f6e74726163742062616c616e636520746f6f206c6f772e000000000000006044820152606401610287565b66038d7ea4c6800060035f8282546103aa919061066d565b90915550506001546040516001600160a01b03909116905f9066038d7ea4c680009082818181858883f193505050501580156103e8573d5f5f3e3d5ffd5b5060015460405166038d7ea4c6800081526001600160a01b03909116907f221c08a06b07a64803b3787861a3f276212fcccb51c2e6234077a9b8cb13047a9060200160405180910390a250600180546001600160a01b0319169055565b6001546060906001600160a01b0316610490575060408051808201909152601e81527f4177616974696e6720626f72726f77657220726567697374726174696f6e0000602082015290565b6040518060600160405280602b8152602001610681602b9139905090565b6001546001600160a01b0316156105075760405162461bcd60e51b815260206004820152601d60248201527f4120626f72726f77657220697320616c7265616479206163746976652e0000006044820152606401610287565b600180546001600160a01b031916339081179091556040517f57c3b463895a0da2fe39978165ab8b71864d9225a91dd3bda7184006e52cdd0c905f90a2565b5f34116105955760405162461bcd60e51b815260206004820152601e60248201527f4d7573742073656e642045544820746f2066756e6420746865206c6f616e00006044820152606401610287565b3460035f8282546105a69190610608565b90915550505f80546001600160a01b031916339081179091556040513481527f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5249060200160405180910390a2565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561061b5761061b6105f4565b92915050565b5f60208284031215610631575f5ffd5b5035919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b8181038181111561061b5761061b6105f456fe426f72726f77657220726567697374657265642c206177616974696e67207969656c642074726967676572a2646970667358221220bc9f4765761438f03571f7e9658aa0a3df3c6a08415c44aa38d32b7c02e8d41564736f6c634300081e0033
